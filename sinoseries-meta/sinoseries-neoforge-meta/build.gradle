plugins {
    id 'architectury-plugin' version "${architect_plugin_version}"
    id 'dev.architectury.loom' version "${architectury_loom_version}"
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

loom {
    runs {
        client {
            configName = 'NeoForge Client'
            runDir = 'run/client'
        }

        server {
            configName = 'NeoForge Server'
            runDir = 'run/server'
        }

        subMod.each { Project mod ->
            "data_${mod.modid}" {
                data()

                ideConfigGenerated = true
                configName = "Data Generator ${mod.modid}"

                programArgs '--all', '--mod', "${mod.modid}",
                        '--output', helpers.getProjectGeneratedResourcesDir(mod).absolutePath

                subMod.each { sub ->
                    helpers.getProjectResourcesDirs(sub).each { dir ->
                        programArgs '--existing', dir.absolutePath
                    }
                }
            }
        }
    }
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }

    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

dependencies {
    neoForge "net.neoforged:neoforge:${project.neoforge_version}"

    modRuntimeOnly group: 'maven.modrinth', name: 'jei', version: project.runtime_neoforge_jei_version
    modRuntimeOnly(group: 'cx.rain.mc.nbtedit', name: 'nbtedit-neoforge', version: project.runtime_all_nbtedit_version) { transitive false }

    subMod.each { Project mod ->
        common(project(path: mod.path, configuration: 'namedElements')) { transitive true }

        helpers.getSubNeoForgeMod(mod).each { Project neoForgeMod ->
            implementation project(path: neoForgeMod.path, configuration: 'namedElements')

            if (mod.modid != 'sinotest') {
                include project(neoForgeMod.path)
            }
        }
    }
}

processResources {
    Map<String, ?> propertiesToExpend = helpers.getPropertiesToExpand(project)
    List<String> filesToMatch = helpers.getFilesToMatchExpand()

    filesMatching(filesToMatch, (copy) -> {
        expand(propertiesToExpend)
    })
}

configureLaunch {
    doLast {
        subMod.each { Project mod ->
            File dir = helpers.getProjectGeneratedResourcesDir(mod)
            if (!dir.exists()) {
                dir.mkdirs()
            }
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            version = helpers.getBuildVersion(project)
            from components.java
        }
    }
}
