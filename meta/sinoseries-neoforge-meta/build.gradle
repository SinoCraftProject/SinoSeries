plugins {
    id 'architectury-plugin' version "${architect_plugin_version}"
    id 'dev.architectury.loom' version "${architectury_loom_version}"
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

loom {
    runs {
        client {
            configName = 'NeoForge Client'
            runDir = 'run/client'
        }

        server {
            configName = 'NeoForge Server'
            runDir = 'run/server'
        }

        project.rootProject.ext.subModProjects.each { Project p ->
            "data_${p.modid}" {
                data()

                ideConfigGenerated = true
                configName = "Data Generator ${p.modid}"

                programArgs '--all', '--mod', "${p.modid}",
                        '--output', p.file('src/generated/resources').absolutePath

                project.rootProject.ext.commonModProjects.each { Project m ->
                    programArgs '--existing', m.file('src/generated/resources').absolutePath
                }
            }
        }
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:${project.neoforge_version}"

    modRuntimeOnly group: 'maven.modrinth', name: 'jei', version: project.runtime_neoforge_jei_version
    modRuntimeOnly(group: 'cx.rain.mc.nbtedit', name: 'nbtedit-neoforge', version: project.runtime_all_nbtedit_version) { transitive false }

    rootProject.ext.platformNeoForge.each { Project p ->
        implementation project(path: p.path, configuration: 'namedElements')

        if (p.parent.modid != 'sinotest') {
            include project(p.path)
        }
    }
}
